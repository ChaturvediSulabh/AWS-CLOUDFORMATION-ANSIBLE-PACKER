AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.99.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.99.1.0/24
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1b
      VpcId: !Ref VPC
      CidrBlock: 10.99.2.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.99.21.0/24
      MapPublicIpOnLaunch: false

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1b
      VpcId: !Ref VPC
      CidrBlock: 10.99.22.0/24
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type : AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  NatPublicIp:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIp
    Properties:
      AllocationId: !GetAtt NatPublicIp.AllocationId
      SubnetId: !Ref PublicSubnetA

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  NatRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssocition:
     Type: AWS::EC2::SubnetRouteTableAssociation
     Properties:
        RouteTableId: !Ref PrivateRouteTable
        SubnetId: !Ref PrivateSubnetB

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Instance Security Group"
      GroupDescription: "Instance Access - (Instance to Instance) tcp, tcp and tcp."
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC

  PublicAclAllowHttp:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  PublicAclAllowHttps:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '104'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  PublicSubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - PublicSubnetA
      - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - PublicSubnetB
      - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetASubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnetBSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref PrivateNetworkAcl

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
        LoadBalancerArn:
          Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        Ref: PublicSubnetA
        Ref: PublicSubnetB
      SecurityGroups:
        Ref: SecurityGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: VPC

  DNS:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: My private hosted zone for example.com
      Name: example.net
      VPCs:
        -
         VPCId: !Ref VPC
         VPCRegion: ap-southeast-1

  #DNSRecordSet:#####################
  #  Type: AWS::Route53::RecordSet
  #  Properties:
  #    Name: !Join
  #      - ""
  #      - ['www.', !Ref DNS, '.']
  #    HostedZoneName: !Ref DNS
  #    Type: CNAME
  #    TTL: '900'
  #    ResourceRecords:
  #      - !GetAtt ApplicationLoadBalancer.DNSName
  ######################################

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: astro-assignment-1-bucket
      VersioningConfiguration:
        Status: Enabled
      AccessControl: PublicRead

  IAMNewRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
             - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: MyPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                - 'autoscaling:Describe*'
                - 'cloudformation:Describe*'
                - 'cloudformation:List*'
                - 'ec2:Describe*'
                - 'elasticloadbalancing:Describe*'
                - 'route53:List*'
                - 'route53:Get*'
                - 's3:List*'
                - 's3:Get*'
                - 's3:PutObject'
                - 'rds:Describe*'
                - 'rds:List*'
                - 'codedeploy:*'

                Resource: '*'

  IAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
         Ref: IAMNewRole
